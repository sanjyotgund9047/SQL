-- Create tables
CREATE TABLE Movie (
    m_name VARCHAR(25),
    release_year INTEGER NOT NULL,
    budget MONEY CHECK (budget >= 600000),
    PRIMARY KEY (m_name, release_year)
);

CREATE TABLE Actor (
    a_name CHAR(30) PRIMARY KEY,
    city VARCHAR(30)
);

CREATE TABLE Producer (
    producer_id INTEGER PRIMARY KEY,
    pname CHAR(30),
    p_address VARCHAR(30)
);

CREATE TABLE MovieActor (
    m_name VARCHAR(25) REFERENCES Movie(m_name),
    release_year INTEGER REFERENCES Movie(release_year),
    a_name CHAR(30) REFERENCES Actor(a_name),
    role VARCHAR(20),
    charges MONEY,
    PRIMARY KEY (m_name, release_year, a_name)
);

CREATE TABLE ProducerMovie (
    producer_id INTEGER REFERENCES Producer(producer_id),
    m_name VARCHAR(25) REFERENCES Movie(m_name),
    release_year INTEGER REFERENCES Movie(release_year),
    PRIMARY KEY (producer_id, m_name, release_year)
);

-- Create views
-- 1. To display actor names who live in 'Mumbai'.
CREATE VIEW ActorsInMumbai AS
SELECT a_name
FROM Actor
WHERE city = 'Mumbai';

-- 2. To display actors' information in each movie.
CREATE VIEW ActorsInMovies AS
SELECT m.m_name, m.release_year, ma.a_name, ma.role, ma.charges
FROM Movie m
JOIN MovieActor ma ON m.m_name = ma.m_name AND m.release_year = ma.release_year;

-- Triggers
-- 1. Trigger before inserting budget into a movie table. Budget should be a minimum of 60 lakh. Display an appropriate message.
CREATE OR REPLACE FUNCTION validateBudget()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.budget < 600000 THEN
        RAISE EXCEPTION 'Invalid budget. Budget should be minimum 60 lakh.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER validate_budget
BEFORE INSERT ON Movie
FOR EACH ROW
EXECUTE FUNCTION validateBudget();

-- Stored Function
-- 2. Stored function to accept producer name as an input parameter and display the count of movies that producer has produced.
CREATE OR REPLACE FUNCTION countMoviesByProducer(producerNameParam CHAR)
RETURNS INTEGER AS $$
DECLARE
    movieCount INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO movieCount
    FROM ProducerMovie pm
    JOIN Producer p ON pm.producer_id = p.producer_id
    WHERE p.pname = producerNameParam;

    RETURN movieCount;
END;
$$ LANGUAGE plpgsql;
